new_parser := proc() is

	local parser := [
		command_table = [
			'add' ~ << () -> asm_gen@@gen_add() >>,
			'sub' ~ << () -> asm_gen@@gen_sub() >>,
			'neg' ~ << () -> asm_gen@@gen_neg() >>,
			'eq' ~ << () -> asm_gen@@gen_eq() >>,
			'gt' ~ << () -> asm_gen@@gen_gt() >>,
			'lt' ~ << () -> asm_gen@@gen_lt() >>,
			'and' ~ << () -> asm_gen@@gen_and() >>,
			'or' ~ << () -> asm_gen@@gen_or() >>,
			'not' ~ << () -> asm_gen@@gen_not() >>,
			'pop' ~ << (segment, i) -> asm_gen@@gen_pop(segment, i) >>,
			'push' ~ << (segment, i) -> asm_gen@@gen_push(segment, i) >>,
			'label' ~ << (label) -> asm_gen@@gen_label(label) >>,
			'goto' ~ << (label) -> asm_gen@@gen_goto(label) >>,
			'if-goto' ~ << (label) -> asm_gen@@gen_if_goto(label) >>,
			'call' ~ << (func, n_args) -> asm_gen@@gen_call(func, n_args) >>,
			'function' ~ << (func, n_vars) -> asm_gen@@gen_function(func, n_vars) >>,
			'return' ~ << () -> asm_gen@@gen_return() >>
		],
		commands = [
			no_args = [
				'add',
				'sub',
				'neg',
				'eq',
				'gt',
				'lt,',
				'and',
				'or',
				'not',
				'return'
			],
			one_arg = [
				'label',
				'goto',
				'if-goto'
			],
			two_arg = [
				'pop',
				'push',
				'function',
				'call'
			],
			memory = [
				'pop',
				'push'
			]
		],
		segments = [
			'local',
			'argument',
			'this',
			'that',
			'constant',
			'static',
			'temp',
			'pointer'
		],
		multi_line_comment_mode = false
	]

	proc parser@@validate_no_args_command(command) is
		if not command in self.commands.no_args then
			error('Command "' & command & '" (with no arguments) is invalid.')
		fi
		return command
	end

	proc parser@@validate_one_arg_command(command, arg1) is
		if not command in self.commands.one_arg then
			error('Command "' & command & '" (with one argument) is invalid.')
		fi
		return command, arg1
	end

	proc parser@@validate_two_arg_command(command, arg1, arg2) is
		try
			arg2 := tonumber(arg2)
			if arg2 < 0 then
				error()
			fi
		catch
			error('Second argument "' & arg2 & '" must be a non negative integer.')
		yrt
		if not command in self.commands.two_arg then
			error('Command "' & command & '" (with two arguments) is invalid.')
		fi
		if command in self.commands.memory and not arg1 in self.segments then
			error('Command "' & command & '" expected a segment name following it, received "' & arg1 & '".')
		fi
		if command = 'pop' and arg1 = 'constant' then
			error('Cannot pop to "constant" segment.')
		fi
		return command, arg1, arg2
	end

	proc parser@@strip_comments(line) is
		if self.multi_line_comment_mode then
			local comment_end := '*/' in line
			if comment_end and comment_end < size(line) - 1 then
				line := line[comment_end + 2 to -1]
				self.multi_line_comment_mode := false
			else
				return ''
			fi
		fi

		#-- remove single line comments starting with #
		line := strings.chomp(line, '#.*')

		#-- remove single line comments starting with //
		line := strings.chomp(line, '//.*')

		#-- remove single line comments wrapped in /* ... */
		for comment in strings.gmatches(line, '/%*.-%*/') do
			line := replace(line, comment, ' ')
		od

		#-- check for the start of a multi line comment starting with /*
		local comment := strings.match(line, '/%*.*$')
		if comment then
			line := replace(line, comment, '')
			self.multi_line_comment_mode := true
		fi
		return line
	end

	proc parser@@parse_line(line) is
		line := trim(self@@strip_comments(replace(line, '\t', ' ')))

		if line = '' then
			return
		fi

		local command, args := strings.cut(line, ' ')	# splits line on first space
		if not args then
			command := self@@validate_no_args_command(command)
			self.command_table[command]()
			return
		fi

		local arg1, arg2 := strings.cut(args, ' ')

		if not arg2 then
			command, arg1 := self@@validate_one_arg_command(command, arg1)
			self.command_table[command](arg1)
		else
			command, arg1, arg2 := self@@validate_two_arg_command(command, arg1, arg2)
			self.command_table[command](arg1, arg2)
		fi
	end

	return parser
end