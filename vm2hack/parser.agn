parser := [
	'command_table' ~ []
]

proc parser@@parse_push(fout, remainder) is
	local segment, i := strings.cut(remainder, ' ')
	i := tonumber(i)
	if segment = "constant" then
		asm_gen@@push_constant(fout, i)
	elif segment in ["local", "this", "that", "argument"] then
		asm_gen@@push(fout, i)
	elif segment = "static" then
		asm_gen@@push_static(fout, i)
	elif segment = "temp" then
		asm_gen@@push_temp(fout, i)
	elif segment = "pointer" then
		asm_gen@@push_pointer(fout, i)
	fi
end


proc parser@@parse_line(fout, line) is
	line := trim(replace(line, '\t', ' '))
	local command, remainder := strings.cut(line, ' ')	# splits line on first space
	self.command_table[command](self, fout, remainder)
end

parser.command_table['push'] := parser.parse_push
# parser.command_table['pop'] := parser.parse_pop