#!agena

#-- Program that translates VM code into Hack assembly
#-- Written by Abraham Murciano and Elad Harizy

vm2hack_dir := os.dirname(os.realpath(io.pcall(if os.iswindows() then 'where' else 'which' fi & ' vm2hack')[1]))
vm2hack_dir := if os.isdir(vm2hack_dir) then vm2hack_dir else '.' fi
run(vm2hack_dir & '/../lib/file_base_name')
run(vm2hack_dir & '/../lib/input')
run(vm2hack_dir & '/parse_args')
run(vm2hack_dir & '/asm_gen')
run(vm2hack_dir & '/parser')

main := proc() is
	#-- get names of input and output files from command line args
	local fin_names, fout_name := parse_args('asm')

	if size(fin_names) = 0 then
		print('No input files given. No assembly will be produced.')
		return
	fi

	#-- check if one of the files is Sys.vm
	local sys_present := false
	for fin_name in fin_names do
		if ('Sys.vm' atendof fin_name) <> null then
			sys_present := true
			break
		fi
	od

	try
		#-- initiate the assempbly generator, providint the output file name, and weather or not to produce bootstrap code
		#-- if Sys.vm is present, then product it, otherwise don't
		asm_gen@@init(fout_name, sys_present)
		io.writeline('Generating assembly to file "' & os.realpath(fout_name) & '".')
	catch msg then
		print('Error: Could not create or open output file "' & fout_name & '".')
		local dirname := os.dirname(fout_name)
		if not os.isdir(dirname) then
			print('Directory "' & dirname & '" does not exist.')
		fi
		return
	yrt

	local parser := new_parser()
	for fin_name in fin_names do
		io.write('Compiling file "' & fin_name & '"... ')
		asm_gen@@set_file_name(fin_name)
		local vm_command := null
		local i := 1
		try
			for keys line in io.lines(fin_name) do
				vm_command := line
				parser@@parse_line(line)
				i++
			od
			io.write('done\n')
		catch msg then
			print('\nError in "' & fin_name & '" on line ' & i & ' near "' & vm_command & '".')
			print(msg)
		yrt
	od

	local errors := false
	for error in asm_gen@@get_errors() do
		print(error)
		errors := true
	od

	if errors then
		asm_gen@@abort()
	else
		asm_gen@@destruct()
	fi
end

main()