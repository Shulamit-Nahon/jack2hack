new_subroutine := proc(kind, return_type, name, class) is

	local subroutine := [
		'kind' ~ kind,
		'return_type' ~ return_type,
		'name' ~ name,
		'class' ~ class,
		'symbol_table' ~ new_symbol_table(),
		'label_maker' ~ new_label_maker()
	]

	if kind = 'method' then
		subroutine.symbol_table@@add_symbol(class.name, 'this', 'argument')
	fi

	proc subroutine@@n_locals(_) is
		return self.symbol_table.counters['local'] or 0
	end

	proc subroutine@@vm_declaration(_) is
		local vm := new_vm_block()

		vm@@append('function ' & self.class.name & '.' & self.name & ' ' & self@@n_locals())

		if self.kind = 'constructor' then
			vm@@append('push constant ' & self.class.n_fields())
			vm@@append('call Memory.alloc 1')
		elif self.kind = 'method' then
			vm@@append('push argument 0')
		onsuccess
			#-- if it's either a constructor or a method
			vm@@append('pop pointer 0')
		fi

		return vm@@to_string()
	end

	return subroutine

end